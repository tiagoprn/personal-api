Adding URL model

- [x] Add the URL model on models.py
- [x] Add a custom user model
- [x] Add the user as a foreign key to the URL model
- [x] Test the the api token generation is working with the new custom user model
- [x] Write tests to validate api token generation and refresh
- [x] Create a manager to `models.Link` so that it can get model instances from a given user.
- [x] Add `tests/test_models.py` - using real model instances in this case, not the model factories - to validate the implementation. Test `most_recent` and `from_user` separately and together
- [x] Implement the business methods on `core.services.urls`
- [x] Add manage command to populate the database with test data
- [x] Run `python personal_api/manage.py populate_test_data` and fix the error where the signal is not called, until it successfully is
- [x] Fix 503 errors on failing tests
- [x] Fix failing test (ignore the one that just was not implemented)
- [x] Finish implementation of the failing tests (marked with "TODO" -`test_models.py`).
- [x] Move code from `personal_api/views.py` to `personal_api/core/views.py`, and the corresponding tests.
- [x] Add view, serializer and filter classes to the Link model
- [x] Rename the Url model to Link
- [-] Create a management command to populate links from a CSV, leveraging pandas to do that.
- [ ] Use curl to manually play with the Link model REST API endpoints
- [ ] Add automated tests submitting requests to the Link model REST API endpoints, including filters defined on the filter classes
- [ ] Add `pagination_class` to `LinkViewSet` (check example on my github repo `catalog-sample-django-drf-app`)
- [ ] Configure swagger for the Link model
